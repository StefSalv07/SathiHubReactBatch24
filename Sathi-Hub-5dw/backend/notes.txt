let is new Var after ES6

const for constant Variable
Let and const 
-------------------------------------------------------
02-03-24

1.vishal -> to perform speciifc task
2.krishna-> code resuablibilty
3.Dev-> block of staement or block of code

A code or block of statement is written with an aim to perform specific task and advantage of using functions over statements is code re-useaa.....

bankAccount()
ATM -> swipe a card pin-> passcode 
bank does checks that the pin entered and the pin stored in the database matches?
if(yes)
1.account deatils
2.withdraw
3.deposit
else(no)//passcode dont matches
ask hime to re-enter after sometimr 

1.user(dev)
1.main()
{
    checkbal
    if(bal){

    }
    passcde valdiations
    {
        passcode is true or not
    }

    loan \
    1.account deatils
    2.withdraw
    3.deposit
300lines
//debug
//maintain
//forgot the passcode

 funtion()
1.funName
2.return type
3.parameters


}
bal.c
BANK()
{
    main()
    {

        void checkBal(1234567,'ABC345')->// user entered 

        when a fun call is made if at time we pass something to afun then it is called a agruments ()

        void createBanKAccount()
        {
            user -> name fname email phoneno intBal of account nomminee details 

            user.save()-> details in database
        }// no ret no args1.

        2.parameters and no ret type
         void checkBal(int accountNumber, String Custid)
         {
            if(accountNumber == user.accountNumber)
            {
                1.Withdraw
                2.desposit
                3.balcheck(3)
                {
                    System.out.println("Your Balance is "+user.IntBal); 
                }
            }   

            3. Ret with paramters()
            int LoanType(accountNumber,.Custid)
            {
                     if(accountNumber == user.accountNumber)
            {
                1.Withdraw
                2.desposit
                3.balcheck(3)
                4.loanAcessed()
                {
                    System.out.println("Your Balance is "+user.IntBal); 
                }
                return int;//unique load id geeraeted

            4.//int chnagePasscode(currecnt passcode , AccouuntNum){
                 
                 currecnt passcode , AccouuntNum;
                 if(accountNumber == user.accountNumber)
            {
                1.Withdraw
                2.desposit
                3.resetPasscode()
                {
                    System.out.println("Your Balance is "+user.IntBal); 
                }
                ret newGenarted Pascode;
            }

            }
         }

    }
}

--------------------------------------------------------------------------
// java\

// class bank

// {//default
//     bank(){
//         bal=0;
//     }
//     main()
//     {
//         bank b1=new bank();
//         bank b2=new bank();
//     }
// }

js functions()ES()-> regulates the rules and decorom of js
1.Named funtion
1.//synatx of Named funtion
function nameOfTheFuntion()
{
    //code to be executed
}

2.Arrow functions
funname=(par1,par2)=>expression{
    //logc
}
3.constructor funtion

function person(lname, age) {
  this.lname = lname;
  this.age = age;

  this.introduce = function () {
    return (
      "Hii My Name is " + this.lname + " and I am " + this.age + " years old"
    );
  };
}
//constor fun
1.arrow fun2
2. callbacks()->  recursion function()-> "A function calling itself".

--------------------------------------------------------------------------------------------------------------
callback();
1-entity calls -> 
1-entity revices and call the original en

fucntion ShowName(int num,)
{

    console.log("Whlile doing simple ShowName);
    ShowName();//
}

//  to search the defination 
loop ()
for()-> nlog()


java async

engine itself loop ()-> evnet loop()->


promises()-> instratgarm ke bhai await ()
asysnc SendRec()-> data inpurt _. stack memeory()
async await 

1. effictent 
2.quick() fun() -> 

Array ()->

int array [5]; 
array[0] = 4;
array[1] = 6;
array[2] = 100;

array every thing is on index. so we can access by index.

console.log(array);

//linear ds  
1.array-> [] fix size 
2.stack -> memeory ram [1000][1004][1008][...][...][][][[][][]]
3.queue
4.linked list ()
----------------------------------------

cin>> loop 
arr.length()
for()
{
    cout<<"\n";
}

// req -> once i pop() the elemnt then only psh fun() shold be called but pop() should not call again itself

----------------------------------------------------------------------------------
Data type specificnathi 

2. no loop 
3. funtions
1. foreach()
2.map()
3.filter() 

Stack()

pop()
push()
peek()
getElementByIndex()

------------------------------------------------------------------------------------------------------------------

object oriented prog

abstarction- hiding the implementation details

class ->             Animal->   
            //dog //cat //cow // monkey 

            brids -> a bird () -- upper level abstarction
             owl , sparrow // crow

             fruit-- upper level abstarction
    
             a layer above object  
             // apple 
             // water-melon

             // vehical -> umbrella
             car / bike / truck 
datatypes
number()
string()
boolean 
symbol ? : ternary op
null -> no value(empty)
undefined -> the value whcih i got has no parenets (orphan )
any value which is not a primitive data type  

object 
// progam -< new keyword
// object.create();

const car = {

}// define an object 

// 2nd way of creating an object

 
// way to create an object using create Meathod
const car2 = Object.create(); // create a new object using an existing object as the prototype of the newly created object



----------------------------------------------github-----------------------------------

1. git init -> inializae a  new empty repo (local machine)
2. login to the browser and click on new 
3. name your repository
4. copy git add remote line from the Stack
5. cp that line on cmd 
data is in pipe on your local computer
5.1 git status -> nothing is added ()
6. git add .    (data)
-----------------------------------------------------------------------------------------------

there are many backend prog lang ?
1.c
2.c++
3.java[env]
4.python

node js?
pros of using node js 
2.which has js lib for running js application
3.real time server application 
node js-> Runtime Env + js lib

featues
1.fast -> extremlyfast
v8-> code exec()
2.I/O async management and Event driven
-> data?
->7
    undefined()-> the data is not yet defined for use.
3.single threaded()
eventLoop()
4.non buffering-> exec data from the user or we can say application offset 
mechanism -> 
buffer
i5 i7 processor -> buffer data store ( not in database)
-> []
4. input // no process // outp 
5.open source
node js 
-> npm (pacakge) folder 
node pacakge manager
client and server
1.req
    1.data o/p
    2.data i/p -> db store 
    3. id -> details
    4.image 
    5.file
2.res
    -> mobile phone
        andorid,react native(cross-platform)-> ios andorid
            -> api's  
    -> laptop 
    html-> data pasre over internet
    xml-> 
    dis-advantage
        1. readability 
        2.parsing the data ()
    Json-> java script object notation (object) collections of objects in terms of lib


// example data parsing 
1. sign up-50
    -1. email id 
     2. password 
     3. name
     slow , parsing data ne 
     structured -> defined that way only you have to work
     link -> server client 
        email: shsh@gmail.com
        pass:bfsyg
        name :djbeiu
        <user> hierachies
        <email></email>
        <password>
            <validate>
                password-> it shoulb be of 8 charcheters

            </validate>
            </password>
        <name></name>
        </user>
        valdiation .dml 
2. json=> root xml -> object 
{
    key:value
}

const user {
    name: 'John',
    email:'shsh@gmail.com'
    {
        type:'personal'
        required = true,
        unique:true// db->pk+pk (super key)
    }
    passcode:{
        type: 'shivam',
    }
}

mobile app-> server json (parse)
web app/site -> json(parse)
json(
    node js -> api,
    nosql -> connection
        ->find()-> {}
            sql -> select * from tablename 
            sql -> select * from tablename where id = 
            resultSet-> select * from tablename where id = 
            -> findAll()
        -> update()
            sql-> select * from ()
            set= () update fielName set "";
           resultSet-> select * from tablename where id = 
           updated  
        ->updateOne()
        -> deleteONe()
        //-> deleteAll()
)
1. effictent -> queryresponse
2. lightweight-> json()-> object save update del
3. json() fast -> json (res) -easy for a human being to understand.




        <user> hierachies
            <email></email>
            <password>
                <validate>
                    password-> it shoulb be of 8 charcheters

            </validate>
            </password>
        <name></name>
        </user>
json{
    key:value
    key: {key: value
        {
            key:value
        }}
}
easy to understand
----------------------------------------------MERN------------------------------------
MONGO-> 
Express -> middleware 

java servlet pages 

req
req validate
req -> 
-> filter (middlware)
res
middleware->express used for validating the data of the web app
1. authentication
    secret data secure 
2. authorization
3. validation 
express()
1. http:hyper text trasfer protocal
api
{
    parameters:{

    }
    headers:{

    }
    body{

    }
}
    methods:
    json()-> object notation -> 
    res res 
    json 
    routing -> folder -> specfic file ne communicate between diff files ?
    render->page goto->page <a href="home.html"a></a>
    services -> tp services{extrenal api use}
    payment -> data -> store -db
    amount -> bal-> 

    paypal -> api use 
    razorpay ->

    1.req res -> multiple
    db-> req -> connection (no)
    db->1. connection() static 
    env-> PORT -> backend server kaya port -> 9000 ,6000
    MONGO DB URI-> mongodb://localhost:27017/database name 
    admin -> testing 
    usernme nd pass-> 
    secret-
----------------------------------------
company structure 
1. product(IT) based company
 diff level of people working 
    CEO CFO-> product owner and clients(who give us the defination to built something)
    DEPT heads-> TEAM LEADER and TECH lead  
    Employees 
    poen staff etc..
    MVC ->
    Architure of heirerchy
    >MVC  -> Model View Controller

2. services based company
-> Cloud computing -> AWS , Google cloud  Azure(microsoft)
IAAS PAAS SAAS

topic of re-search sunday(3-4pm)
topmost used software enginnering models in the industry
what is currently running /used for developmnt
nodejs.org how are we using the provided mpms 
---------------------------------
>MVC  -> Model  Controller
VIEW -> react js
MERN stack 

model -> conatines info of database
controller-> heart of the App/site
routes-> basically routes via which over data transports over internet
services-> thirdparty api we use is over services
config-> just the info of the database or any other third party configuration
.evn -> enviormental variable 
PORT-> 3000
DB conn -> URL of connecting to database is for the first time and last time 

flipkart -> loggedin-> /POST sent to server
number 
password
in the backend flipkart has a post url wwww.flipkart.com/logggedin/user/hfrastukoltlatau5tgaot;otha
model -> check the fields
//validation that number data validation +91 9664858715 
page opened /home/products/tv+51/onida/hfwar25914agfzgyueavftge;atgs4u

model-> developed in Mongo db.
ask the at the croma store while buying a laptop?
what is the price
?
1,11,000
? configuration 
RAM: 8GB
SSD 128
GC=TB

entry file-> pilot file or commanding officor -> has liberty for everything 
server.js -> http server whwre we have info like port number -> on which port my backend services will run?
// MOngo db connection 
// routes //

SQl And NOSql


mongoDb
1.Cross Platform DATABASE-> json()
2.Document Oriented Database
3.High performance and high availablity
4.concept of collections/tables

Database?..
container for collections!
One line:-> A physical container for storing collections and
each database has its own set of files on server.

Collection?>
a group of mongodb Docs.!= RDBMS(table)


Docs> KEY VALUE PAIR
{
	"key":"value"
}=>json

{
	ObjectID:hexadecimal
	StudentName: shivam(string)
	EnrollMent Number:(Integer)
	image:"32bit long url"
}
-> dynamic -> can grow whenever you want
Mobile Web infrastructure
Contect Management Delivery
Data hub


---------------------------------------------------------\
Data Models?
Normalized.
2-> embedded{

	{Obj_id:'0xbfgpqgf'oath'},
	{},
	{},
}, 


		

db.collection_name.insert(documents)

db.users.insert(
	{

	_id:ObjectId("45678fgjdgtew"),
	title:"MOngo db revision",
	desc:"mongo is nosql",
	by:"shivam",
	url:"http://localhost:3454/shivam",
	likes:1
	}

)
>

















Database engin...
Data base administrator.
yash, priyank , shivam etc..

data-> commit (we cant change them )
rollback()
//delete * from products -> 
rollback() 1.5 cr
database engineer lock()-> session 
prod -> commit roll back tcl_>


-> SQL -> structured Query langauge
structured-> followed in a simple manner
Query -> INSERT the Data into table 

DDL-> Data Defination Langauge
name field shu rehse variable type kevu hase
DML-> Data manipultion ""
INSERT DELETE ,UPDATE , SELECT 
TCL-> Transaction Control
rollback commit etcc.
DCL-> Data Control ""
PK FK Constraints


(table)-> data store e specific format
bridge -> two tables 


Student(table name)Entity             Courses(TN)
id(PK)	1	     		     course Id(PK) 007
name	yash	      	             Course Name MERN
roll 	007	     	           Course Taken by			   
phone 	
grade	A+
courseId(fk) course
stud 
1-> courseID(name,Taken)

1.student -> FK(link1)
 


Students who have enrolled in some course?
> 


1. data base creation
2.use database
3.table->fields -> 
4.data insertion
5.crud operation.

//MERN
// Express-> middleware which provides a sever to communicate with the connecting backend + frontend
//global files like system files
// image upload and sharing links across the internet
communication link and our computer will work as server
1. creating a server
2. express


apis ?
how we can test it?
front end!
//postman 
----------------------------------------------------------
express-Any lib from web
steps 
npm i lib name into cmd 

---------------------------------------------------------------------------------------
SOAP AND REST API-

API-> Application programming interface
restro ambiance-> front end
reqeuests-> panner items -> 
waiter-> panner -> toofani , bhurji , palak=> touch 
restro kitchen-> backend


backend=> node js config-> signup form
API-> middleware
/req
/signup name nu koi j interface 6e?
success

, error
fromtend=> req
1.authentication
ATM Card-> expire /
chip working ?
prog-> ATM-> live -> api(logic 7903 === database.shivam.pin())
backend=? res-> 10
1.withdraw?
2.deposit->
yes can deposit?
10000->

backend->api(if(bal == 0)
{
    // cantwithdraw
}
else{
    depodummy = deposit
    depodummy.save()->10000
    bal =  bal + depodummy.
}
ATM -> exit(0)
frontend=>res-> "Deposited Successfully"
)
1234 1234 1234 1234 //valid
login-> valdiations
visa rupay credit/debit
// password => 7678
eg finger print face lock  etc
=? fingerprint ?-> 
 api-> inteface-> interaction
//server mesaage -> the user with this pin is valid?

2.authorization.
bal withdraw , deposit ()->

Once the authentication is done we are bound to authorize.

front-end-> forms?
data->
ways?

simple
 object-> living entity
  access=>access
   protocal/rules

   soap -> xml -> heirerchy
   forntend->>>><formdata>
        <name></name>
        <firstName></firstname>
        <lastname></lastname>
        <email></email>
   </formdata>--------------->>backend
//low-effictent
//serial nothing
// data parse -> number -> validate?

REST API ->
Represnataionl state trasfer-> 
data -> tranfer (state info)
theory-> pratical -> i wll represent api

waiter -> order -> status-> order revieved.-> flag =0 flag=1 change in condition there is a change in state
order-> chef-> status-> order in making
chef-> waiter-> status-> order Delivery done.
user-> waiter-> status -> order satisfied successfully
frontend + backend
Json({
    "":""
})

map 
filter
ternary=>
for_each

TCP?
3---
UDP?
3----

students = 
[
    {
        Student1:{
            name:"John",
            age:25,
            address:  California USA
        }
    },
    {
        Stundent2:{
            name:"John",
            age:25,
            address:  California USA
        }
    }
{

}
NODEMON     crash -> syntax error

error?
try(
    //code //critical sectiom-> error ava na chances are high
)
catch("Exception),
finally()
{
    //alwys exe
}
then().catch()

1.installed -> mongoose , express
2. created a local server to communicate -> webapps/ mobile apps
3.cloud clusters "mongodb+srv"

your task
1.Prepare a report on a defination of a project 
2. data dict
3. craete a new github repo and folder structure

nomenclature-> whcih was and is followed today also

MVC->
model view controller(project) logic of api

Organize

React->

I.employee management system()

developing a webapp(dynamic) 
tonight 
12+ 
()
MERN
forntend-> 30%-> look n fill
backend-> 60%->  CRUD operations-> business logic
data dict-> 10%-> crucial 10%
actors -> actig in a webapp
picking up a new defination
identify the people who will use




1.planning
2.analysis
3.documention
4.designing
5.implementation
6.deployment
7.delivery
8.maintenance

1.waterfall 
// no customer interactions
// no changes to be done after deployment 
// one build can't modify
one go (2-9)months
//constly 
2.agile model 
- continous evaluation 
- develop smaller modules and Delivery
- dividing the problem in smaller modules
-timily inputs and timely delivery.
delelovping a piece of a whole(project)
-test
-check for exceptions-while deployed
-delivery of that piece of code 
to add features after deploying
constant evolution of the proejct 

3. scrum (agile) 
Scrum master -> 10 min breif meet everyday and let the people present their work which they did yesterday

-5-7 per TEAM
1 Team LEADER
1 project owner

grp of testers 
everyone will be all-rounder()
----------------------------------------------------------------
26-03-2024
TASK

your task
1.Prepare a report on a defination of a project -> 500
UScase -> dd -> project ma use tools -> live /local 
    identify the actors->  
    tables 
    session management
    1.login 
    2.signup
    3.forget password
    4.change password
2. data dict
3. craete a new github repo and folder structure
4.ZOD LIB OF NPM TO validate
-----------------------------------------------------------
project updates
requ-> customer
res-developer

The person who is going to interact.


most changable thing-> on ech and every stage of devlopment
the DD , project's docs are chnage
diff of opinions
eridicate the conflicts between them ->project Docs

should always be updated
new feature 

public / session controller
1. login,signUp, 
    forget password, otp verfication , authenticastion and authorization-100%
// DEVELOP -> valdiation->TEST- CHANGES -> OPTIMISE

2. CURD 
// DEVELOP -> TEST- CHANGES -> OPTIMISE
3. business LOGIC 

line up for this week.
1.authenticastion
2.authorization 
3.login signup , forget password , change password
4. Post man (deatils)
---------------------------------------------------------
//NETWORKING?-> internet -> "blackbox"
App
network-> Protocal
transport-> data -> app to datalink
datalink
physical  data being really transferred!
1. tcP- transmission control protocal
2.UDP-> uer datagram 
local-> http://127.0.0.1:5000
198.456.789.235
www.google.com->
1. Domain name
    www-> 
    http\
    https
    .daiict-> 154.3.4.578 340 trillions
    billions
    millions
    340 trillions
    .ac-> acedemic, com->commercial
    .in-> humans->india 
    .en->
    Domains
    1. tld
        -> in
2. IP Address?
    192.168.1.1-> network 
    4set-> ipv4-> 4 billion 64 bit address 
    ipv6-> 128 bit address

translator
webapp
data -> over the network /local../Domain

internet ki phone book is my Domains

server-> client 
http/https -> secure socket layer

REST-> apis-> 
Stateless 
req -> response life cycle
data-> 
small chunks divided
16bit 64bits
methods
POST-> SUBMIT DATA 
GET-> Retrive data
PUT-> update 
DELETE-> remove
HEAD
OPTIONS

195.346.789.34 : port 80
https: 443
smtp-> 25
udp-> 53
ftp-> 20/21
ssh-> www.domain:ip:22


async await ?


1,multiple req
2.async pehla process async -> wait exe
3.keyword fun-> async banava

javascript-> bydefault synchrones?